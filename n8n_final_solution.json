{
  "name": "Working LLM API - Final Solution",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Рабочее решение для вызова LLM API\nconst message = $input.first().json.message || 'Привет! Как дела?';\n\n// Используем https модуль вместо fetch\nconst https = require('https');\n\nconst postData = JSON.stringify({\n  messages: [\n    {\n      role: 'user',\n      content: message\n    }\n  ]\n});\n\nconst options = {\n  hostname: 'llm.flyingplate.cloud',\n  port: 443,\n  path: '/api/chat',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Content-Length': Buffer.byteLength(postData)\n  }\n};\n\nconst response = await new Promise((resolve, reject) => {\n  const req = https.request(options, (res) => {\n    let data = '';\n    res.on('data', (chunk) => {\n      data += chunk;\n    });\n    res.on('end', () => {\n      try {\n        const jsonData = JSON.parse(data);\n        resolve(jsonData);\n      } catch (error) {\n        reject(new Error('Invalid JSON response'));\n      }\n    });\n  });\n  \n  req.on('error', (error) => {\n    reject(error);\n  });\n  \n  req.write(postData);\n  req.end();\n});\n\nreturn [{\n  json: {\n    success: true,\n    ai_response: response.response,\n    tokens_used: response.usage?.total_tokens || 0,\n    raw_response: response,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "custom-function",
      "name": "Call LLM API",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "SUCCESS"
            },
            {
              "name": "response",
              "value": "={{ $json.ai_response }}"
            },
            {
              "name": "tokens",
              "value": "={{ $json.tokens_used }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "format-output",
      "name": "Format Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [680, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Call LLM API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call LLM API": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}