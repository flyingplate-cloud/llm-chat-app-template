// –¢–µ—Å—Ç API –¥–ª—è llm.flyingplate.cloud
async function testChatAPI() {
  const apiUrl = 'https://llm.flyingplate.cloud/api/chat';
  
  try {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–∞—Ç–∞...');
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ "API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!" –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏.' }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API:');
    console.log('üìù –¢–µ–∫—Å—Ç:', data.response);
    console.log('üîß Tool calls:', data.tool_calls);
    console.log('üìä Usage:', data.usage);
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async function testConversation() {
  const apiUrl = 'https://llm.flyingplate.cloud/api/chat';
  
  try {
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥...');
    
    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response1 = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          { role: 'user', content: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π. –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ.' }
        ]
      })
    });

    const data1 = await response1.json();
    console.log('üë§ –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç:', data1.response);

    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞)
    const response2 = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          { role: 'user', content: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π. –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ.' },
          { role: 'assistant', content: data1.response },
          { role: 'user', content: '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?' }
        ]
      })
    });

    const data2 = await response2.json();
    console.log('ü§ñ –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç:', data2.response);
    
    return { data1, data2 };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  try {
    await testChatAPI();
    await testConversation();
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();