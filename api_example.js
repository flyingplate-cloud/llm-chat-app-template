// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API llm.flyingplate.cloud

class ChatAPI {
  constructor(baseUrl = 'https://llm.flyingplate.cloud/api/chat') {
    this.baseUrl = baseUrl;
    this.conversationHistory = [];
  }

  async sendMessage(message, systemPrompt = null) {
    const messages = [...this.conversationHistory];
    
    if (systemPrompt && messages.length === 0) {
      messages.unshift({ role: 'system', content: systemPrompt });
    }
    
    messages.push({ role: 'user', content: message });

    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      this.conversationHistory.push({ role: 'user', content: message });
      this.conversationHistory.push({ role: 'assistant', content: data.response });
      
      return {
        response: data.response,
        usage: data.usage,
        tool_calls: data.tool_calls
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ API:', error);
      throw error;
    }
  }

  clearHistory() {
    this.conversationHistory = [];
  }

  getHistory() {
    return [...this.conversationHistory];
  }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function examples() {
  const chat = new ChatAPI();
  
  console.log('ü§ñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API\n');

  // 1. –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
  console.log('1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å:');
  const result1 = await chat.sendMessage('–ß—Ç–æ —Ç–∞–∫–æ–µ JavaScript?');
  console.log('–û—Ç–≤–µ—Ç:', result1.response);
  console.log('–¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:', result1.usage.total_tokens);
  console.log('---\n');

  // 2. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log('2Ô∏è‚É£ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:');
  const result2 = await chat.sendMessage(
    '–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ JavaScript, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ',
    '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–º –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.'
  );
  console.log('–ö–æ–¥:', result2.response);
  console.log('---\n');

  // 3. –î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  console.log('3Ô∏è‚É£ –î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:');
  chat.clearHistory();
  await chat.sendMessage('–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫');
  await chat.sendMessage('–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ —á–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?');
  const result3 = await chat.sendMessage('–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ JavaScript');
  console.log('–û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:', result3.response);
  console.log('---\n');

  // 4. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
  console.log('4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:');
  const result4 = await chat.sendMessage(
    '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: "JavaScript - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –û–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1995 –≥–æ–¥—É."',
    '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
  );
  console.log('–ê–Ω–∞–ª–∏–∑:', result4.response);
  console.log('---\n');

  // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  console.log('5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
  console.log('–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:', chat.getHistory().length);
  console.log('–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:', chat.getHistory().map(msg => `${msg.role}: ${msg.content.substring(0, 50)}...`));
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
examples().catch(console.error);